<TeXmacs|1.0.7.4>

<style|letter>

<\body>
  <surround|||<doc-data|<doc-title|CS157 Homework
  5>|<doc-author-data|<author-name|chaoqian and silao_xu>|<\author-address>
    \;
  </author-address>>|<doc-date|<date|>>>>

  <section|Problem 1>

  Bilbo has a long journey ahead of him and wants to stay in comfortable
  hotels along his route each night, but can only walk 20 miles in a day.
  Fortunately, he has a guidebook charting the locations of all the hotels
  along his route. (Bilbo already knows which route he is taking; he only has
  to choose where along his route to stay each night.)

  <\enumerate-numeric>
    <item>(8 points) Find a greedy algorithm for Bilbo to compute how to
    finish his journey in the least number of days. Points on this problem
    will only be given for the proof that your algorithm is optimal; more
    points will be given for simpler and clearer proofs.

    <\itemize-dot>
      <item><with|font-shape|italic|<strong|Greedy Algorithm>>

      Let start point be <with|mode|math|s> and the termination be
      <with|mode|math|T>. The following algorithm will find the next hotel as
      far as possible within 20 miles for each hop.\ 

      <\code>
        <\verbatim>
          01 def <with|font-shape|italic|Find-Way>(s):\ 

          02 \ \ \ \ n = <with|font-shape|italic|Get-Next>(s)\ 

          03 \ \ \ \ if n = T then do:

          04 \ \ \ \ \ \ \ \ return 0\ 

          05 \ \ \ \ else:

          06 \ \ \ \ \ \ \ \ return 1 + <with|font-shape|italic|Find-Way>(n)\ 

          07 end\ 

          08\ 

          09 def <with|font-shape|italic|Get-Next>(s):\ 

          10 \ \ \ \ n = s.nextHotel\ 

          11 \ \ \ \ while n.distFromStart - s.distFromStart
          <math|\<geqslant\>> 20 do:\ 

          12 \ \ \ \ \ \ \ \ s = n

          13 \ \ \ \ \ \ \ \ n = s.nextHotel\ 

          14 \ \ \ \ end\ 

          15 \ \ \ \ return n

          16 end
        </verbatim>
      </code>

      <item><strong|<with|font-shape|italic|Correctness>>

      <\itemize-minus>
        <item><strong|Claim>. <with|font-shape|italic|Find-Way> terminates.

        <with|font-shape|italic|Proof>: The <with|font-shape|italic|Find-Way>
        would recurse on the next route point (the hotel along the route he
        will live in at night). Since the destination of the route is known,
        therefore line 3 would become true at some point.

        <item><strong|Claim>. <with|font-shape|italic|Find-Way> satisfies the
        feasibility that he needs to walk at most 20 miles every day in the
        trip.

        <with|font-shape|italic|Proof>: Based on the assumption that the
        distance between every consecutive pair of hotels would not exceed 20
        miles, in <with|font-shape|italic|Get-Next> line 10, the first next
        hotel we look at would not 20 miles further than <with|mode|math|s>.
        Also, in <with|font-shape|italic|Get-Next> line 11 we limit that the
        furthest hotel from <with|mode|math|s> would not exceed 20 miles. So
        we conclude that <with|font-shape|italic|Find-Way> satisfies the
        feasibility that Bilbo would walk at most 20 miles every day in the
        trip.

        <item><strong|Claim>. <with|font-shape|italic|Find-Way> satisfies the
        optimality criteria that he can finish his journey in the least
        number of days.

        <with|font-shape|italic|Proof>: Let <with|mode|math|S>* be the
        optimal solution got from <with|font-shape|italic|Find-Way>. Assume
        that there is an optimal solution <with|mode|math|S> that require
        less than days in solution <with|mode|math|S>* for Bilbo to finish,
        there must be a day <with|mode|math|d>, in the entire trip such that
        Bilbo could walk more than <with|font-shape|italic|Find-Way>
        solution. However, based on the fact that the distance between every
        consecutive pair of hotels would not exceed 20 miles and the
        algorithm we construct in <with|font-shape|italic|Get-Next> line 11,
        if in day <with|mode|math|d> solution <with|mode|math|S> Bilbo would
        walk more than the miles in solution <with|mode|math|S>*, then Bilbo
        have to walk more than 20 miles. Contradiction!

        So, no other solutions would be better than <with|mode|math|S>*,
        <with|font-shape|italic|Find-Way> satisfies the optimality criteria
        that Bilbo can finish his journey in the least number of days.
      </itemize-minus>
    </itemize-dot>

    <item>(3 points) After studying your algorithm for the previous problem,
    Bilbo realizes that, actually, the different hotels cost different
    amounts, and what he actually wants to do is minimize the total cost of
    his journey. (Luckily, his guidebook also lists the cost of each hotel.)
    He thinks of the following greedy algorithm: wherever he is, for each
    hotel within a day's walk of him (20 miles), he computes the ``cost per
    mile'' of staying there, dividing its cost by the amount of progress he
    would make by staying there; given this list of costs, he then chooses to
    spend his next night at the hotel with the best cost per mile.
    Demonstrate for Bilbo that being greedy can be costly, that is, describe
    an example where Bilbo's algorithm gives suboptimal performance.

    Suppose the route is as follows:

    <postscript|<tuple||png>|*5/8|*5/8||||>

    Based on the greedy algortihm he constructs, in the very beginning, hotel
    <with|mode|math|A> is his next destination since
    <with|mode|math|<frac|30|6m>\<less\><frac|90|6m+8m>>, and the second
    hotel he would arrive would be <with|mode|math|B> since within 20 miles,
    <with|mode|math|B> is the only hotel. In this case, Bilbo would live in 2
    hotels spending 120. But the optimal solution would be walk through hotel
    <with|mode|math|B> in his first day and that would only charge him
    <with|mode|math|90>.

    <item>(4 points) Find a dynamic programming algorithm for Bilbo's
    problem. Make it clear to Bilbo why it works, including an explanation of
    the meaning of any tables you ask Bilbo to construct. (Your solution for
    this part should look like an explanation, not a proof).

    <\itemize-dot>
      <strong|<em|<item>DP Algorithm>>

      The pseudocode is as follows:

      <\code>
        <math|s\<leftarrow\>>departure point

        <math|t\<leftarrow\>>termination point

        <math|N\<leftarrow\>>total number of hotels

        label each hotel in the route from <math|s> to <math|t> from 1 to
        <math|N>

        construct a <math|(N+1)> array ``<em|hotels>'' in which

        \ \ \ \ each element <math|i> stores the minimum cost from <math|s>
        to hotel <math|i>

        construct a <math|(N+1)> array ``<with|font-shape|italic|hops>'' in
        which each element <math|i> stores

        \ \ \ \ the previous hotel number Bilbo would live in before hotel
        <math|i>

        def <with|font-shape|italic|Find-MinCost-Way>(<math|t>):

        \ \ \ \ <em|hotels>[0]<math|\<leftarrow\>0>

        \ \ \ \ <em|hops>[0]<math|\<leftarrow\>s>

        \ \ \ \ for <math|j> from 1 to <math|N> do:

        \ \ \ \ \ \ \ \ for each hotel <math|i> with 20 miles before location
        <math|j>:

        \ \ \ \ \ \ \ \ \ \ \ \ hotels[<math|j>] <math|\<leftarrow\>>
        min{hotels[<math|i>] + <math|j>.cost}

        \ \ \ \ \ \ \ \ \ \ \ \ hops[<math|j>] <math|\<leftarrow\>>hotel
        index of min{hotels[<math|i>]}

        \ \ \ \ for each hotel <math|k> within 20 miles before <math|t> then
        do:

        \ \ \ \ \ \ \ \ return min{hotel(<math|k>)}
      </code>

      <strong|<em|<item>Correctness>> (Proof by Induction)

      <with|font-shape|italic|Base Case>:

      If the distance from <math|s> to <math|t> is less than 20 miles, assume
      there is <math|c> hotels in the route. Then from <math|s> to hotel
      <math|i> (<math|i> ranges from 1 to <math|c>), the optimal cost of
      every intermediate destination, hotel <math|i>, is the cost of hotel
      <math|i> itself. Also, we have set hotel number 0 is of cost 0 and
      therefore the minimum cost from departure point to destination is of
      cost 0. Base case holds.

      <with|font-shape|italic|Inductive Hypothesis>:

      Assume in intermediate destination hotel <math|k>, in its previous 20
      miles, there were <math|m> hotels and from <math|s> to hotel <math|i>
      (<math|i> ranges from <math|k-m> to <math|k>) we have constructed
      optimal route for it.\ 

      We need to prove that we would have the minimal cost starting from
      <math|s>, ending at hotel <math|k+1>.

      In hotel <math|k+1>'s previous 20 miles, there are no more than
      <math|m+1> hotels. So based on our inductive hypothesis, from <math|s>
      to hotel <math|i> (<math|i> ranges from <math|k+1-(m+1)> to <math|k>),
      we have constructed optimal route for it. For the route from <math|s>
      to hotel <math|k+1>, we could find the optimal route by choosing the
      minimal cost from the previous <math|m+1> hotels' route and add hotel
      <math|k+1>'s cost.

      So we could find the optimal route from <math|s> to the termination.
    </itemize-dot>

    \;
  </enumerate-numeric>
</body>

<\references>
  <\collection>
    <associate|auto-1|<tuple|1|1>>
  </collection>
</references>

<\auxiliary>
  <\collection>
    <\associate|toc>
      <vspace*|1fn><with|font-series|<quote|bold>|math-font-series|<quote|bold>|Problem
      1> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>>
      <no-break><pageref|auto-1><vspace|0.5fn>
    </associate>
  </collection>
</auxiliary>